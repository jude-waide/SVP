//
// Created by j4wai on 15/01/2024.
//

#include <iostream>
#include "Matrix.h"
#include "algorithms.h"
#include <cassert>
#include <cmath>

int main() {
    // Known lattice from https://en.wikipedia.org/wiki/Lenstra%E2%80%93Lenstra%E2%80%93Lov%C3%A1sz_lattice_basis_reduction_algorithm
    Matrix<double> test1 = {{1,-1,3},
                        {1,0,5},
                        {1,2,6}};
    LLL(test1,0.75);
    Matrix<double> expected = {{0,1,-1},
                               {1,0,0},
                               {0,1,2}};
    assert(test1 == expected);
    std::cout << "LLL passed" << std::endl;


    Matrix<double> test2 = {{1,-1,3},
                        {1,0,5},
                        {1,2,6}};
    double result = (test2*kfpEnum(test2)).magnitude();
    assert(result == 1);
    std::cout << "KFP passed" << std::endl;

    // Known lattice generated by fplll
    Matrix<double> test3 = {{3662664325.0,2902436492.0,1639198643.0,3581480664.0,3131619753.0,
                             2290713219.0,1948505784.0,747848132.0,1213689342.0,3679046204.0},
                            {1,0,0,0,0,0,0,0,0,0},
                            {0,1,0,0,0,0,0,0,0,0},
                            {0,0,1,0,0,0,0,0,0,0},
                            {0,0,0,1,0,0,0,0,0,0},
                            {0,0,0,0,1,0,0,0,0,0},
                            {0,0,0,0,0,1,0,0,0,0},
                            {0,0,0,0,0,0,1,0,0,0},
                            {0,0,0,0,0,0,0,1,0,0},
                            {0,0,0,0,0,0,0,0,1,0}};
    result = svp(test3);
    assert(round(result * 10000.0) / 10000.0 == 8.3666);
    std::cout << "Full svp test passed" << std::endl;

    return 0;
}

